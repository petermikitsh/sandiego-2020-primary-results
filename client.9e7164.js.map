{"version":3,"sources":["webpack:///./src/client/components/ContestStats.tsx","webpack:///./src/client/utils.ts","webpack:///./src/client/index.ts","webpack:///./src/client/App.tsx","webpack:///./src/client/components/PrecinctMap.tsx","webpack:///./src/client/components/RegionLayer.tsx","webpack:///./src/client/components/PopperContent.tsx","webpack:///./src/client/components/RoadLayer.tsx"],"names":["ContestTable","data","size","Object","values","map","regionId","region","key","winners","winner","voteCount","sum","toFixed","ContestStats","results","regionsSorted","entries","regions","filter","length","sort","a","b","winMargin","mostCompetitive","slice","leastCompetitive","reverse","container","spacing","style","marginTop","item","xs","variant","getRegionIds","regionLevel","features","area","properties","CONSNAME","feature","PRECINCT","getRegionBlueprint","candidateIds","regionIds","reduce","acc","candidates","candidateId","perYes","perNo","net","precinctIdToRegionId","precinctId","regionType","replace","match","getContestData","contestName","summary","precincts","contests","affirmativeCandidateName","find","candidate","indexOf","negativeCandidateName","isBinaryRace","blueprint","p","forEach","Precinct","Number","Votes","nameCountTuple","tie","this","ReactDOM","render","React","createElement","App","document","getElementById","LightMode","createMuiTheme","palette","type","DarkMode","primary","light","main","dark","contrastText","secondary","StyledPage","styled","div","useStyles","makeStyles","theme","formControl","margin","minWidth","classes","useState","setRegionLevel","currContest","setCurrContest","setContests","setTheme","setResults","darkMode","useDarkMode","useEffect","darkModeEnabled","value","countyLevelContests","contest","currContestData","href","component","className","id","labelId","onChange","e","target","maxWidth","capitalCase","String","toggle","hot","StyledMap","props","projection","geo","fitSize","sdcounty","getPath","PrecinctMap","svgRef","useRef","zoomRef","currZoom","zoom","extent","scaleExtent","on","selection","current","attr","transform","call","ref","width","height","preserveAspectRatio","viewBox","patternUnits","d","stroke","getAttribute","color","scale","scaleChromatic","domain","getRegionId","regionGeoJSON","getRegionLabel","label","RegionLayer","neighborhoods","setRegions","popperData","setPopperData","regionIdToPathMap","setRegionIdToPathMap","currFeature","index","regionData","data-id","fill","stringToColor","onMouseOver","anchor","querySelector","onMouseLeave","open","anchorEl","placement","regionLabel","getPercent","percent","PopperContent","candidateTuple","empty","marginRight","RoadLayer","roads","setRoads","road","OBJECTID"],"mappings":"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","file":"client.9e7164.js","sourcesContent":["import React from 'react';\nimport { Grid } from '@material-ui/core';\nimport {\n  Card,\n  CardContent,\n  Typography,\n  Table,\n  TableBody,\n  TableRow,\n  TableCell,\n} from '@material-ui/core';\nimport { Region, Results } from '../types';\n\nconst ContestTable = ({ data }: { data: [string, Region][] }) => {\n  return (\n    <Table size=\"small\">\n      <TableBody>\n        {Object.values(data).map(([regionId, region]) => {\n          return (\n            <TableRow key={regionId}>\n              <TableCell>{regionId}</TableCell>\n              <TableCell>\n                {region.winners.map(([winner]) => (\n                  <p key={winner}>{winner}</p>\n                ))}\n              </TableCell>\n              <TableCell>\n                {region.winners.map(([winner, voteCount]) => (\n                  <p key={winner}>\n                    {((voteCount / region.sum) * 100).toFixed(2)}%\n                  </p>\n                ))}\n              </TableCell>\n            </TableRow>\n          );\n        })}\n      </TableBody>\n    </Table>\n  );\n};\n\nexport const ContestStats = ({ results }: { results?: Results }) => {\n  if (!results) {\n    return null;\n  }\n\n  const regionsSorted = Object.entries(results?.regions)\n    .filter(([, a]) => a.winners.length)\n    .sort(([, a], [, b]) => {\n      if (!a.winMargin && !b.winMargin) {\n        return -1;\n      }\n      return a.winMargin - b.winMargin;\n    });\n\n  const mostCompetitive = regionsSorted.slice(0, 5);\n  const leastCompetitive = regionsSorted\n    .slice(regionsSorted.length - 5, regionsSorted.length)\n    .reverse();\n\n  return (\n    <Grid container spacing={3} style={{ marginTop: '10px' }}>\n      <Grid item xs={6}>\n        <Card>\n          <CardContent>\n            <Typography variant=\"h6\">Most Competitive</Typography>\n            <ContestTable data={mostCompetitive} />\n          </CardContent>\n        </Card>\n      </Grid>\n      <Grid item xs={6}>\n        <Card>\n          <CardContent>\n            <Typography variant=\"h6\">Least Competitive</Typography>\n            <ContestTable data={leastCompetitive} />\n          </CardContent>\n        </Card>\n      </Grid>\n    </Grid>\n  );\n};\n","import maxBy from 'lodash.maxby';\nimport { Precinct, Results, Regions } from './types';\n\nconst getRegionIds = async (regionLevel: string): Promise<string[]> => {\n  if (regionLevel === 'neighborhood') {\n    const {\n      default: { features },\n    } = await import(\n      // @ts-ignore\n      '../../data/consolidations.geojson'\n    );\n    return features.map(area => area.properties.CONSNAME);\n  } else if (regionLevel === 'precinct') {\n    const {\n      default: { features },\n    } = await import(\n      // @ts-ignore\n      '../../data/sandiego.txt'\n    );\n    return features.map(feature => feature.properties.PRECINCT);\n  }\n};\n\nconst getRegionBlueprint = (\n  candidateIds: string[],\n  regionIds: string[],\n): Regions => {\n  return regionIds.reduce(\n    (acc, regionId) => ({\n      ...acc,\n      [regionId]: {\n        candidates: candidateIds.reduce(\n          (acc, candidateId) => ({\n            ...acc,\n            [candidateId]: null,\n          }),\n          {},\n        ),\n        sum: null,\n        perYes: null,\n        perNo: null,\n        net: null,\n        winMargin: null,\n      },\n    }),\n    {},\n  );\n};\n\nconst precinctIdToRegionId = (precinctId: string, regionType: string) => {\n  if (regionType === 'neighborhood') {\n    return precinctId.replace(/\\d+-\\d+-/, '').replace(/-VBM/g, '');\n  } else if (regionType === 'precinct') {\n    // ex: \"0001-105000-RANCHO BERNARDO\"\n    return precinctId.match(/\\d{4}-(\\d{6})/)[1];\n  }\n};\n\nexport const getContestData = async (\n  contestName: string,\n  regionType: 'neighborhood' | 'precinct' = 'neighborhood',\n): Promise<Results> => {\n  if (!contestName) {\n    return;\n  }\n\n  // @ts-ignore\n  const { default: summary } = await import('../../data/summary_8.json');\n  const { default: precincts }: { default: Precinct[] } = await import(\n    // @ts-ignore\n    '../../data/precincts_8.json'\n  );\n  const contests = summary.filter(item => item['Contest Name'] === contestName);\n  const candidates = contests.map(item => item['Candidate Name']);\n  const affirmativeCandidateName = candidates.find(\n    candidate => candidate.indexOf('YES') > -1,\n  );\n  const negativeCandidateName = candidates.find(\n    candidate => candidate.indexOf('NO') > -1,\n  );\n  const isBinaryRace =\n    candidates.length === 2 &&\n    affirmativeCandidateName &&\n    negativeCandidateName;\n  const regions = await getRegionIds(regionType);\n\n  return {\n    contestName,\n    isBinaryRace,\n    candidates,\n    regions: (() => {\n      const blueprint = getRegionBlueprint(candidates, regions);\n\n      // Decorate blueprint with raw stats.\n      precincts\n        .filter(p => p['Contest Name'] === contestName)\n        .forEach(p => {\n          const regionId = precinctIdToRegionId(p.Precinct, regionType);\n          const candidateId = p['Candidate Name'];\n          const voteCount = Number(p.Votes);\n          /* Some precinct data (e.g, precinct \"8294-999294-VBM-AV\")\n           * doesn't correlate to any mappable area. */\n          blueprint[regionId] &&\n            (blueprint[regionId].candidates[candidateId] += voteCount);\n        });\n\n      // Decorate blueprint with computed metrics.\n      regions.forEach(regionId => {\n        const region = blueprint[regionId];\n        const nameCountTuple = Object.entries(region.candidates)\n          .sort(([, a], [, b]) => {\n            return b - a;\n          })\n          .filter(([, a]) => a > 0);\n\n        const winners = nameCountTuple.filter(\n          winner => winner[1] === nameCountTuple[0][1],\n        );\n        const tie = winners.length > 1;\n\n        blueprint[regionId] = {\n          ...region,\n          tie,\n          sum: Object.values(region.candidates).reduce((a, b) => a + b),\n          get winners() {\n            return winners;\n          },\n          get winner() {\n            const noVotes = this.sum === 0;\n            if (noVotes || tie) {\n              return null;\n            }\n            return nameCountTuple[0][0];\n          },\n          get winMargin() {\n            if (this.sum === 0) {\n              return null;\n            }\n            if (nameCountTuple.length <= 1) {\n              return nameCountTuple.length;\n            }\n            return (nameCountTuple[0][1] - nameCountTuple[1][1]) / this.sum;\n          },\n          get perYes() {\n            return region.candidates[affirmativeCandidateName] / this.sum || 0;\n          },\n          get perNo() {\n            return region.candidates[negativeCandidateName] / this.sum || 0;\n          },\n          get net() {\n            return this.perYes - this.perNo;\n          },\n        };\n      });\n\n      return blueprint;\n    })(),\n  };\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(React.createElement(App), document.getElementById('app'));\n","import React, { useEffect, useState } from 'react';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Select from '@material-ui/core/Select';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport { makeStyles } from '@material-ui/core/styles';\nimport FormControl from '@material-ui/core/FormControl';\nimport Typography from '@material-ui/core/Typography';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport { createMuiTheme, ThemeProvider } from '@material-ui/core/styles';\nimport { hot } from 'react-hot-loader/root';\nimport { capitalCase } from 'change-case';\nimport styled from 'styled-components';\nimport GithubCorner from 'react-github-corner';\nimport { PrecinctMap } from './components/PrecinctMap';\nimport { ContestStats } from './components/ContestStats';\nimport useDarkMode from 'use-dark-mode';\nimport { Theme } from '@material-ui/core';\nimport { getContestData } from './utils';\nimport { Results } from './types';\n\nconst LightMode = createMuiTheme({\n  palette: {\n    type: 'light',\n  },\n});\n\nconst DarkMode = createMuiTheme({\n  palette: {\n    type: 'dark',\n    primary: {\n      light: '#757ce8',\n      main: '#90CAF9',\n      dark: '#002884',\n      contrastText: '#fff',\n    },\n    secondary: {\n      light: '#ff7961',\n      main: '#f44336',\n      dark: '#ba000d',\n      contrastText: '#000',\n    },\n  },\n});\n\nconst StyledPage = styled.div`\n  max-width: 850px;\n  margin: 20px;\n\n  @media (min-width: 840px) {\n    margin: 20px auto;\n    margin-bottom: 0;\n  }\n`;\n\nconst useStyles = makeStyles(theme => ({\n  formControl: {\n    margin: theme.spacing(1),\n    minWidth: 120,\n  },\n}));\n\nconst App = () => {\n  const classes = useStyles();\n  const [regionLevel, setRegionLevel] = useState<string>('neighborhood');\n  const [currContest, setCurrContest] = useState<string>();\n  const [contests, setContests] = useState<object[]>([]);\n  const [theme, setTheme] = useState<Theme>();\n  const [results, setResults] = useState<Results>();\n  const darkMode = useDarkMode();\n\n  useEffect(() => {\n    const darkModeEnabled = darkMode.value;\n    setTheme(darkModeEnabled ? DarkMode : LightMode);\n  }, [darkMode]);\n\n  useEffect(() => {\n    (async () => {\n      // @ts-ignore\n      const { default: contests } = await import('../../data/contests_8.json');\n      const countyLevelContests = contests.filter(contest => !contest.Precinct);\n      setContests(countyLevelContests);\n      setCurrContest(countyLevelContests[1]['Contest Name']);\n    })();\n  }, []);\n\n  useEffect(() => {\n    (async () => {\n      // @ts-ignore\n      const currContestData = await getContestData(currContest, regionLevel);\n      setResults(currContestData);\n    })();\n  }, [currContest, regionLevel]);\n\n  return (\n    <ThemeProvider theme={theme}>\n      <StyledPage>\n        <GithubCorner href=\"https://github.com/petermikitsh/sandiego-2020-primary-results\" />\n        <Typography variant=\"h3\" component=\"h1\">\n          San Diego County\n        </Typography>\n        <Typography variant=\"h4\" component=\"h2\">\n          March 3, 2020 Primary\n        </Typography>\n        <FormControl className={classes.formControl}>\n          <InputLabel id=\"detail-level-label\">Region</InputLabel>\n          <Select\n            value={regionLevel}\n            labelId=\"detail-level-label\"\n            id=\"detail-level\"\n            onChange={e => {\n              // @ts-ignore\n              setRegionLevel(e.target.value);\n            }}\n          >\n            <MenuItem value=\"precinct\">Precinct</MenuItem>\n            <MenuItem value=\"neighborhood\">Neighborhood</MenuItem>\n          </Select>\n        </FormControl>\n        <FormControl\n          className={classes.formControl}\n          style={{ maxWidth: '350px' }}\n        >\n          {currContest && contests && (\n            <>\n              <InputLabel id=\"demo-simple-select-label\">Contest</InputLabel>\n              <Select\n                value={currContest}\n                labelId=\"demo-simple-select-label\"\n                id=\"demo-simple-select\"\n                onChange={e => {\n                  // @ts-ignore\n                  setCurrContest(e.target.value);\n                }}\n              >\n                {contests.map(contest => (\n                  <MenuItem\n                    key={contest['Contest Name']}\n                    value={contest['Contest Name']}\n                  >\n                    {capitalCase(contest['Contest Name'])}\n                  </MenuItem>\n                ))}\n              </Select>\n            </>\n          )}\n        </FormControl>\n        <FormControl className={classes.formControl}>\n          <InputLabel id=\"mode-label\">Mode</InputLabel>\n          <Select\n            value={String(darkMode.value)}\n            labelId=\"mode-label\"\n            id=\"mode-select\"\n            onChange={e => {\n              if (e.target.value !== String(darkMode.value)) {\n                darkMode.toggle();\n              }\n            }}\n          >\n            <MenuItem value=\"false\">Light Mode</MenuItem>\n            <MenuItem value=\"true\">Dark Mode</MenuItem>\n          </Select>\n        </FormControl>\n        <Card variant=\"outlined\">\n          <CardContent>\n            <PrecinctMap results={results} regionLevel={regionLevel} />\n          </CardContent>\n        </Card>\n        <ContestStats results={results} />\n      </StyledPage>\n    </ThemeProvider>\n  );\n};\n\nexport default hot(App);\n","import React, { useEffect, useRef } from 'react';\nimport * as geo from 'd3-geo';\nimport * as selection from 'd3-selection';\nimport * as zoom from 'd3-zoom';\nimport styled from 'styled-components';\nimport useDarkMode from 'use-dark-mode';\nimport { RegionLayer } from './RegionLayer';\nimport { RoadLayer } from './RoadLayer';\n// @ts-ignore\nimport { default as sdcounty } from '../../../data/sdcounty.geojson';\nimport { Results } from '../types';\n\ninterface StyledMapProps {\n  darkMode: boolean;\n  results: Results;\n}\n\nconst StyledMap = styled.div<StyledMapProps>`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n\n  path {\n    vector-effect: non-scaling-stroke;\n    stroke-width: 0.2;\n  }\n\n  .county {\n    stroke: ${props => (props.darkMode ? '#fff' : '#555')};\n    stroke-width: ${props => (props.darkMode ? '1.5' : '1')};\n    stroke-opacity: ${props => (props.darkMode ? '1' : '0.5')};\n    fill: transparent;\n    fill: #f9f9fa;\n    fill-opacity: 0.5;\n  }\n\n  .region path {\n    stroke: ${props => (props.darkMode ? '#333' : '#aaa')};\n    fill: ${props => (props.darkMode ? '#e7e7e7' : '#e7e7e7')};\n    fill: #f9f9fa;\n    stroke-opacity: 0.5;\n    fill-opacity: 0.5;\n    cursor: pointer;\n  }\n\n  .region path:hover {\n    stroke-width: 2;\n    stroke: ${props => (props.darkMode ? '#333' : '#222')};\n    stroke-opacity: 1;\n  }\n\n  .roads path {\n    stroke: ${props => (props.darkMode ? '#888' : '#ddd')};\n    stroke-width: 1;\n    fill: transparent;\n  }\n`;\n\nconst width = 600;\nconst height = 500;\nconst INITIAL_X = -500;\nconst INITIAL_Y = -1400;\nconst INITIAL_ZOOM = 4;\nconst projection = geo.geoMercator().fitSize([width, height], sdcounty);\nconst getPath = geo.geoPath().projection(projection);\n\ninterface PrecinctMapProps {\n  results: Results;\n  regionLevel: string;\n}\n\nexport const PrecinctMap = ({ results, regionLevel }: PrecinctMapProps) => {\n  const svgRef = useRef<SVGSVGElement>();\n  const zoomRef = useRef<SVGGElement>();\n  const darkMode = useDarkMode();\n\n  useEffect(() => {\n    (async () => {\n      const currZoom = zoom\n        .zoom()\n        .extent([\n          [0, 0],\n          [width, height],\n        ])\n        .scaleExtent([0.9, 25])\n        .on('zoom', () => {\n          selection\n            .select(zoomRef.current)\n            .attr('transform', selection.event.transform);\n        });\n      selection\n        .select(svgRef.current)\n        .call(currZoom)\n        .call(currZoom.transform, zoom.zoomIdentity);\n    })();\n  }, []);\n\n  return (\n    <StyledMap darkMode={darkMode.value}>\n      <svg\n        ref={svgRef}\n        width={width}\n        height={height}\n        preserveAspectRatio=\"xMinYMin meet\"\n        viewBox={`0 0 ${width} ${height}`}\n      >\n        <defs>\n          <pattern\n            id=\"diagonal-stripe-1\"\n            patternUnits=\"userSpaceOnUse\"\n            width=\"4\"\n            height=\"4\"\n          >\n            <path\n              d=\"M-1,1 l2,-2 M0,4 l4,-4 M3,5 l2,-2\"\n              style={{ stroke: darkMode.value ? '#333' : '#aaa' }}\n            />\n          </pattern>\n        </defs>\n        <g\n          ref={zoomRef}\n          transform={\n            zoomRef?.current?.getAttribute('transform') ||\n            `translate(${INITIAL_X}, ${INITIAL_Y}), scale(${INITIAL_ZOOM})`\n          }\n        >\n          <g>\n            <path className=\"county\" d={getPath(sdcounty)} />\n          </g>\n          <g className=\"roads\">\n            <RoadLayer getPath={getPath} />\n          </g>\n          <g className=\"region\">\n            <RegionLayer\n              getPath={getPath}\n              results={results}\n              regionLevel={regionLevel}\n            />\n          </g>\n        </g>\n      </svg>\n    </StyledMap>\n  );\n};\n","import React, { useState, useEffect, useMemo, useCallback } from 'react';\nimport * as scale from 'd3-scale';\nimport * as scaleChromatic from 'd3-scale-chromatic';\nimport Popper from '@material-ui/core/Popper';\n// @ts-ignore\nimport { default as neighborhoods } from '../../../data/consolidations.geojson';\n// @ts-ignore\nimport { default as precincts } from '../../../data/sandiego.txt';\nimport { Results } from '../types';\nimport stringToColor from 'string-to-color';\nimport { PopperContent } from './PopperContent';\nimport debounce from 'lodash.debounce';\n\nconst color = scale\n  .scaleSequential(scaleChromatic.interpolateRdBu)\n  .domain([-1, 1]);\n\ninterface RegionLayerProps {\n  getPath(feature: any): string;\n  results?: Results;\n  regionLevel: string;\n}\n\nconst getRegionId = (regionLevel: string, regionGeoJSON: any) => {\n  if (regionLevel === 'neighborhood') {\n    return regionGeoJSON?.properties?.CONSNAME;\n  } else if (regionLevel === 'precinct') {\n    return regionGeoJSON?.properties?.PRECINCT;\n  }\n};\n\nconst getRegionLabel = (region: any) => {\n  const label = region?.properties?.CONSNAME;\n  const precinctId = region?.properties?.PRECINCT;\n\n  if (!precinctId) {\n    return label;\n  }\n\n  return `${label} ${precinctId}`;\n};\n\nexport const RegionLayer = ({\n  results,\n  getPath,\n  regionLevel,\n}: RegionLayerProps) => {\n  const [regions, setRegions] = useState(neighborhoods.features);\n  const [popperData, setPopperData] = useState<any>();\n  const [regionIdToPathMap, setRegionIdToPathMap] = useState(null);\n\n  useEffect(() => {\n    setRegionIdToPathMap(\n      [...precincts.features, ...neighborhoods.features].reduce(\n        (acc, currFeature) => {\n          const regionId =\n            currFeature.properties.PRECINCT || currFeature.properties.CONSNAME;\n          acc[regionId] = getPath(currFeature);\n          return acc;\n        },\n        {},\n      ),\n    );\n  }, []);\n\n  useEffect(() => {\n    if (regionLevel === 'precinct') {\n      setRegions(precincts.features);\n    } else if (regionLevel === 'neighborhoods') {\n      setRegions(neighborhoods.features);\n    }\n  }, [regionLevel]);\n\n  return (\n    <>\n      {regions.map((region, index) => {\n        const regionId = getRegionId(regionLevel, region);\n\n        return (\n          <path\n            d={regionIdToPathMap?.[regionId]}\n            key={regionId}\n            data-id={regionId}\n            style={{\n              fill: (() => {\n                const regionData = results?.regions[regionId];\n                if (results && !regionData?.sum) {\n                  return 'url(#diagonal-stripe-1)';\n                } else if (results?.isBinaryRace) {\n                  return color(regionData.net);\n                } else if (regionData?.sum > 0 && regionData.winner) {\n                  return stringToColor(regionData.winner);\n                }\n              })(),\n            }}\n            onMouseOver={() => {\n              setPopperData({\n                anchor: document.querySelector(`[data-id=\"${regionId}\"]`),\n                geo: region,\n              });\n              // setRegions([\n              //   ...regions.slice(0, index),\n              //   ...regions.slice(index + 1, regions.length),\n              //   region,\n              // ]);\n            }}\n            onMouseLeave={() => {\n              setPopperData(null);\n            }}\n          />\n        );\n      })}\n      <Popper\n        open={!!popperData}\n        anchorEl={popperData?.anchor}\n        placement=\"left\"\n      >\n        <PopperContent\n          regionLabel={getRegionLabel(popperData?.geo)}\n          region={results?.regions[getRegionId(regionLevel, popperData?.geo)]}\n        />\n      </Popper>\n    </>\n  );\n};\n","import React from 'react';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport { Typography } from '@material-ui/core';\nimport { Region } from '../types';\n\nimport { Table, TableBody, TableRow, TableCell } from '@material-ui/core';\n\ninterface PopperContentProps {\n  regionLabel?: string;\n  region?: Region;\n}\n\nconst getPercent = (candidateId: string, region: Region) => {\n  const percent = region.candidates[candidateId] / region.sum || 0;\n  return `${(percent * 100).toFixed(2)}%`;\n};\n\nexport const PopperContent = ({ region, regionLabel }: PopperContentProps) => {\n  const candidateTuple = Object.entries(region?.candidates || {})\n    .sort(([, a], [, b]) => b - a)\n    .slice(0, 5);\n  const empty = !candidateTuple.length;\n\n  return (\n    <Card style={{ marginRight: '10px' }}>\n      <CardContent style={{ maxWidth: '350px' }}>\n        <p>\n          <Typography variant=\"overline\">NEIGHBORHOOD</Typography>\n          <Typography>{regionLabel}</Typography>\n        </p>\n        <Typography variant=\"overline\">RESULTS</Typography>\n        {empty && <div>No Results</div>}\n        <Table size=\"small\">\n          <TableBody>\n            {candidateTuple.map(([candidateId, voteCount]) => (\n              <TableRow key={candidateId}>\n                <TableCell>{candidateId}</TableCell>\n                <TableCell>{voteCount}</TableCell>\n                <TableCell>{getPercent(candidateId, region)}</TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n      </CardContent>\n    </Card>\n  );\n};\n","import React, { useState, useEffect } from 'react';\n\ninterface RoadLayerProps {\n  getPath(road: any): string;\n}\n\nexport const RoadLayer = ({ getPath }: RoadLayerProps) => {\n  const [roads, setRoads] = useState<any>();\n\n  useEffect(() => {\n    (async () => {\n      const { default: roads } = await import(\n        // @ts-ignore\n        '../../../data/highways.geojson'\n      );\n      setRoads(roads);\n    })();\n  }, []);\n\n  if (!roads) {\n    return null;\n  }\n\n  return roads.features.map(road => (\n    <path key={road.properties.OBJECTID} d={getPath(road)} />\n  ));\n};\n"],"sourceRoot":""}