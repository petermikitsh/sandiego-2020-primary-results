{"version":3,"sources":["webpack:///./src/client/index.ts","webpack:///./src/client/App.tsx","webpack:///./src/client/components/PrecinctMap.tsx","webpack:///./src/client/utils.ts"],"names":["ReactDOM","render","React","createElement","App","document","getElementById","DarkMode","createMuiTheme","palette","type","StyledPage","styled","div","useState","currContest","setCurrContest","contests","setContests","useEffect","a","countyLevelContests","filter","contest","Precinct","theme","href","variant","component","style","margin","id","value","labelId","onChange","e","target","map","key","capitalCase","backgroundColor","hot","color","scale","scaleChromatic","domain","StyledMap","PrecinctMap","mount","useRef","svgRef","zoomRef","highwayRef","precinctsRef","popperData","setPopperData","contestData","setContestData","getContestData","currContestData","current","forEach","parent","firstChild","removeChild","highwayGeoJson","neighborhoodGeoJson","projection","geo","fitSize","selection","selectAll","data","features","enter","append","attr","on","anchor","this","raise","d","isBinaryRace","CONSNAME","properties","net","results","currZoom","zoom","extent","scaleExtent","transform","call","translate","classed","ref","width","height","preserveAspectRatio","viewBox","open","anchorEl","placement","transition","maxWidth","PRECINCT","whiteSpace","display","JSON","stringify","getNeighborhoods","area","contestName","summary","precincts","item","candidates","length","neighborhoods","reduce","acc","currVal","candidate","precinct","neighborhood","replace","Number","Votes","Object","keys","YES","NO","moreData","sum","perYes","perNo"],"mappings":"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","file":"client.dba7ef.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(React.createElement(App), document.getElementById('app'));\n","import React, { useEffect, useState } from 'react';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Select from '@material-ui/core/Select';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport Typography from '@material-ui/core/Typography';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport { createMuiTheme, ThemeProvider } from '@material-ui/core/styles';\nimport { hot } from 'react-hot-loader/root';\nimport { capitalCase } from 'change-case';\nimport styled from 'styled-components';\nimport GithubCorner from 'react-github-corner';\nimport { PrecinctMap } from './components/PrecinctMap';\n\nconst DarkMode = createMuiTheme({\n  palette: {\n    type: 'dark',\n  },\n});\n\nconst StyledPage = styled.div`\n  max-width: 800px;\n  margin: 20px;\n\n  @media (min-width: 840px) {\n    margin: 20px auto;\n  }\n`;\n\nconst App = () => {\n  const [currContest, setCurrContest] = useState<string>();\n  const [contests, setContests] = useState<object[]>([]);\n  useEffect(() => {\n    (async () => {\n      // @ts-ignore\n      const { default: contests } = await import('../../data/contests_8.json');\n      const countyLevelContests = contests.filter(contest => !contest.Precinct);\n      setContests(countyLevelContests);\n      setCurrContest(countyLevelContests[1]['Contest Name']);\n    })();\n  }, []);\n\n  return (\n    <ThemeProvider theme={DarkMode}>\n      <StyledPage>\n        <GithubCorner href=\"https://github.com/petermikitsh/sandiego-2020-primary-results\" />\n        <Typography variant=\"h3\" component=\"h1\">\n          San Diego County\n        </Typography>\n        <Typography variant=\"h4\" component=\"h2\">\n          March 3, 2020 Primary\n        </Typography>\n        <FormControl style={{ margin: '20px 0' }}>\n          <InputLabel id=\"demo-simple-select-label\">Contest</InputLabel>\n          {currContest && (\n            <Select\n              value={currContest}\n              labelId=\"demo-simple-select-label\"\n              id=\"demo-simple-select\"\n              onChange={e => {\n                // @ts-ignore\n                setCurrContest(e.target.value);\n              }}\n            >\n              {contests.map(contest => (\n                <MenuItem\n                  key={contest['Contest Name']}\n                  value={contest['Contest Name']}\n                >\n                  {capitalCase(contest['Contest Name'])}\n                </MenuItem>\n              ))}\n            </Select>\n          )}\n        </FormControl>\n        <Card variant=\"outlined\" style={{ backgroundColor: '#333' }}>\n          <CardContent>\n            <PrecinctMap contest={currContest} />\n          </CardContent>\n        </Card>\n      </StyledPage>\n    </ThemeProvider>\n  );\n};\n\nexport default hot(App);\n","import React, { useEffect, useRef, useState } from 'react';\nimport * as geo from 'd3-geo';\nimport * as selection from 'd3-selection';\nimport * as zoom from 'd3-zoom';\nimport * as scale from 'd3-scale';\nimport * as scaleChromatic from 'd3-scale-chromatic';\nimport styled from 'styled-components';\nimport Popper from '@material-ui/core/Popper';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport { Typography } from '@material-ui/core';\nimport { getContestData, Results } from '../utils';\n\nconst color = scale\n  .scaleSequential(scaleChromatic.interpolateRdBu)\n  .domain([-1, 1]);\n\nconst StyledMap = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n\n  path {\n    vector-effect: non-scaling-stroke;\n    stroke-width: 0.2;\n    stroke: #ddd;\n    fill: #7d7d7d;\n    stroke: #ddd;\n  }\n\n  path:not(.highway) {\n    fill-opacity: 0.5;\n  }\n\n  path:not(.highway):hover {\n    stroke-width: 3;\n    stroke: #000;\n    z-index: 1;\n  }\n\n  .highway {\n    stroke: #fff;\n    stroke-width: 1;\n    fill: transparent;\n  }\n`;\nconst width = 600;\nconst height = 500;\n\nexport const PrecinctMap = ({ contest }: { contest: string }) => {\n  const mount = useRef();\n  const svgRef = useRef();\n  const zoomRef = useRef();\n  const highwayRef = useRef();\n  const precinctsRef = useRef();\n  const [popperData, setPopperData] = useState<any>();\n  const [contestData, setContestData] = useState<Results>();\n\n  useEffect(() => {\n    (async () => {\n      const currContestData = await getContestData(contest);\n      setContestData(currContestData);\n\n      // clear old nodes before repainting\n      const parents = [highwayRef.current, precinctsRef.current];\n      parents.forEach((parent: SVGElement) => {\n        while (parent.firstChild) {\n          parent.removeChild(parent.firstChild);\n        }\n      });\n\n      // repaint map\n      (async () => {\n        const { default: highwayGeoJson } = await import(\n          // @ts-ignore\n          '../../../data/highways.geojson'\n        );\n\n        const { default: neighborhoodGeoJson } = await import(\n          // @ts-ignore\n          '../../../data/consolidations.geojson'\n        );\n\n        const projection = geo.geoMercator();\n        projection.fitSize([width, height], neighborhoodGeoJson);\n        selection\n          .select(precinctsRef.current)\n          .selectAll('path')\n          .data(neighborhoodGeoJson.features)\n          .enter()\n          .append('path')\n          .attr('d', geo.geoPath().projection(projection))\n          .on('mouseover', function(geo) {\n            setPopperData({\n              anchor: this,\n              geo,\n            });\n            selection.select(this as any).raise();\n          })\n          .on('mouseleave', () => {\n            setPopperData(null);\n          })\n          // @ts-ignore\n          .style('fill', (d: any) => {\n            if (currContestData?.isBinaryRace) {\n              const {\n                properties: { CONSNAME },\n              } = d;\n\n              // @ts-ignore\n              const { net } = currContestData.results[CONSNAME];\n              return color(net);\n            }\n          });\n        const currZoom = zoom\n          .zoom()\n          .extent([\n            [0, 0],\n            [width, height],\n          ])\n          .scaleExtent([1, 25])\n          .on('zoom', () => {\n            selection\n              .select(zoomRef.current)\n              .attr('transform', selection.event.transform);\n          });\n        selection\n          .select(svgRef.current)\n          .call(currZoom)\n          .call(\n            currZoom.transform,\n            zoom.zoomIdentity.translate(-500, -1400).scale(4),\n          );\n\n        projection.fitSize([width, height], neighborhoodGeoJson);\n        selection\n          .select(highwayRef.current)\n          .selectAll('path')\n          .data(highwayGeoJson.features)\n          .enter()\n          .append('path')\n          .attr('d', geo.geoPath().projection(projection))\n          .classed('highway', true);\n      })();\n    })();\n  }, [contest]);\n\n  return (\n    <StyledMap ref={mount}>\n      <svg\n        ref={svgRef}\n        width={width}\n        height={height}\n        preserveAspectRatio=\"xMinYMin meet\"\n        viewBox={`0 0 ${width} ${height}`}\n      >\n        <g ref={zoomRef}>\n          <g ref={highwayRef} />\n          <g ref={precinctsRef} />\n        </g>\n      </svg>\n      <Popper\n        open={!!popperData}\n        anchorEl={popperData?.anchor}\n        placement=\"left\"\n        transition\n      >\n        <Card>\n          <CardContent style={{ maxWidth: '300px' }}>\n            <Typography variant=\"overline\">PRECINCT / NEIGHBORHOOD</Typography>\n            <div>\n              {popperData?.geo?.properties?.CONSNAME}{' '}\n              {popperData?.geo?.properties?.PRECINCT}\n            </div>\n            <Typography variant=\"overline\">CONTEST</Typography>\n            <div>{contest}</div>\n            <Typography variant=\"overline\">RESULTS</Typography>\n            <pre style={{ whiteSpace: 'pre-wrap', display: 'block' }}>\n              {JSON.stringify(\n                contestData?.results?.[popperData?.geo?.properties?.CONSNAME],\n                null,\n                2,\n              )}\n            </pre>\n          </CardContent>\n        </Card>\n      </Popper>\n    </StyledMap>\n  );\n};\n","const getNeighborhoods = async (): Promise<string[]> => {\n  const {\n    default: { features },\n  } = await import(\n    // @ts-ignore\n    '../../data/consolidations.geojson'\n  );\n  return features.map(area => area.properties.CONSNAME);\n};\n\nexport interface Results {\n  contestName: string;\n  isBinaryRace: boolean;\n  candidates: string[];\n  results: {\n    // Candidate names & vote count\n    [key: string]: number;\n    // Below: for binary races only.\n    sum?: number;\n    readonly perYes?: number;\n    readonly perNo?: number;\n    readonly net?: number;\n  };\n}\n\nexport const getContestData = async (contestName: string): Promise<Results> => {\n  if (!contestName) {\n    return;\n  }\n\n  // @ts-ignore\n  const { default: summary } = await import('../../data/summary_8.json');\n  // @ts-ignore\n  const { default: precincts } = await import('../../data/precincts_8.json');\n\n  const contests = summary.filter(item => item['Contest Name'] === contestName);\n  const candidates = contests.map(item => item['Candidate Name']);\n  const isBinaryRace = candidates.length === 2;\n  const neighborhoods = await getNeighborhoods();\n\n  const results = neighborhoods.reduce((acc, currVal) => {\n    acc[currVal] = {};\n    candidates.forEach(candidate => {\n      acc[currVal][candidate] = 0;\n    });\n    return acc;\n  }, {});\n\n  precincts.forEach(precinct => {\n    if (precinct['Contest Name'] !== contestName) {\n      return;\n    }\n    const neighborhood = precinct.Precinct.replace(/\\d+-\\d+-/, '').replace(\n      /-VBM/g,\n      '',\n    );\n    const candidate = precinct['Candidate Name'];\n    if (typeof results?.[neighborhood]?.[candidate] === 'number') {\n      results[neighborhood][candidate] += Number(precinct.Votes);\n    }\n  });\n\n  // Decorate with percentages for coloring purposes.\n  if (isBinaryRace) {\n    Object.keys(results).forEach(neighborhood => {\n      const { YES, NO } = results[neighborhood];\n\n      const moreData = {\n        sum: YES + NO,\n        get perYes() {\n          return YES / this.sum || 0;\n        },\n        get perNo() {\n          return NO / this.sum || 0;\n        },\n        get net() {\n          return this.perYes - this.perNo;\n        },\n      };\n\n      results[neighborhood] = {\n        ...results[neighborhood],\n        ...moreData,\n      };\n    });\n  }\n\n  return {\n    contestName,\n    isBinaryRace,\n    candidates,\n    results,\n  };\n};\n"],"sourceRoot":""}