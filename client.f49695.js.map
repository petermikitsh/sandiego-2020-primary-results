{"version":3,"sources":["webpack:///./src/client/index.ts","webpack:///./src/client/App.tsx","webpack:///./src/client/components/PrecinctMap.tsx","webpack:///./src/client/components/RegionLayer.tsx","webpack:///./src/client/utils.ts","webpack:///./src/client/components/RoadLayer.tsx"],"names":["ReactDOM","render","React","createElement","App","document","getElementById","LightMode","createMuiTheme","palette","type","DarkMode","primary","light","main","dark","contrastText","secondary","StyledPage","styled","div","useStyles","makeStyles","theme","formControl","margin","spacing","minWidth","classes","useState","regionLevel","setRegionLevel","currContest","setCurrContest","contests","setContests","setTheme","darkMode","useDarkMode","useEffect","darkModeEnabled","value","a","countyLevelContests","filter","contest","Precinct","href","variant","component","className","id","labelId","onChange","e","target","disabled","style","maxWidth","map","key","capitalCase","String","toggle","hot","StyledMap","props","projection","geo","fitSize","sdcounty","getPath","PrecinctMap","svgRef","useRef","zoomRef","currZoom","zoom","extent","scaleExtent","on","selection","current","attr","transform","call","translate","scale","ref","width","height","preserveAspectRatio","viewBox","getAttribute","d","color","scaleChromatic","domain","RegionLayer","neighborhoods","features","regions","setRegions","popperData","setPopperData","contestData","setContestData","getPathMemo","feature","useMemo","getContestData","currContestData","region","index","properties","CONSNAME","data-id","fill","isBinaryRace","results","net","onMouseOver","anchor","querySelector","slice","length","onMouseLeave","open","anchorEl","placement","marginRight","PRECINCT","whiteSpace","display","JSON","stringify","getNeighborhoods","area","contestName","summary","precincts","item","candidates","affirmativeCandidateName","find","candidate","indexOf","negativeCandidateName","reduce","acc","currVal","forEach","precinct","neighborhood","replace","Number","Votes","Object","keys","YES","NO","moreData","sum","this","perYes","perNo","RoadLayer","roads","setRoads","road","OBJECTID"],"mappings":"2QAIAA,IAASC,OAAOC,IAAMC,cAAcC,KAAMC,SAASC,eAAe,S,gjzrCCc5DC,EAAYC,YAAe,CAC/BC,QAAS,CACPC,KAAM,WAIJC,EAAWH,YAAe,CAC9BC,QAAS,CACPC,KAAM,OACNE,QAAS,CACPC,MAAO,UACPC,KAAM,UACNC,KAAM,UACNC,aAAc,QAEhBC,UAAW,CACTJ,MAAO,UACPC,KAAM,UACNC,KAAM,UACNC,aAAc,WAKdE,EAAaC,IAAOC,IAAV,kEAAGD,CAAH,6FAUVE,EAAYC,aAAW,SAAAC,GAAK,MAAK,CACrCC,YAAa,CACXC,OAAQF,EAAMG,QAAQ,GACtBC,SAAU,SAIRvB,EAAM,WACV,IAAMwB,EAAUP,IADA,EAEsBQ,mBAAiB,gBAFvC,WAETC,EAFS,KAEIC,EAFJ,OAGsBF,qBAHtB,WAGTG,EAHS,KAGIC,EAHJ,OAIgBJ,mBAAmB,IAJnC,WAITK,EAJS,KAICC,EAJD,OAKUN,qBALV,WAKTN,EALS,KAKFa,EALE,KAMVC,EAAWC,cAiBjB,OAfAC,qBAAU,WACR,IAAMC,EAAkBH,EAASI,MACjCL,EAASI,EAAkB7B,EAAWJ,KACrC,CAAC8B,IAEJE,qBAAU,WACR,cAAC,gCAAAG,EAAA,sEAEqC,kCAFrC,gBAEkBR,EAFlB,UAGOS,EAAsBT,EAASU,QAAO,SAAAC,GAAO,OAAKA,EAAQC,YAChEX,EAAYQ,GACZV,EAAeU,EAAoB,GAAG,iBALvC,0CAAD,KAOC,IAGD,kBAAC,IAAD,CAAepB,MAAOA,GACpB,kBAACL,EAAD,KACE,kBAAC,IAAD,CAAc6B,KAAK,kEACnB,kBAAC,IAAD,CAAYC,QAAQ,KAAKC,UAAU,MAAnC,oBAGA,kBAAC,IAAD,CAAYD,QAAQ,KAAKC,UAAU,MAAnC,yBAGA,kBAAC,IAAD,CAAaC,UAAWtB,EAAQJ,aAC9B,kBAAC,IAAD,CAAY2B,GAAG,sBAAf,UACA,kBAAC,IAAD,CACEV,MAAOX,EACPsB,QAAQ,qBACRD,GAAG,eACHE,SAAU,SAAAC,GAERvB,EAAeuB,EAAEC,OAAOd,SAG1B,kBAAC,IAAD,CAAUA,MAAM,WAAWe,UAAQ,GAAnC,0BAGA,kBAAC,IAAD,CAAUf,MAAM,gBAAhB,kBAGJ,kBAAC,IAAD,CACES,UAAWtB,EAAQJ,YACnBiC,MAAO,CAAEC,SAAU,UAElB1B,GAAeE,GACd,oCACE,kBAAC,IAAD,CAAYiB,GAAG,4BAAf,WACA,kBAAC,IAAD,CACEV,MAAOT,EACPoB,QAAQ,2BACRD,GAAG,qBACHE,SAAU,SAAAC,GAERrB,EAAeqB,EAAEC,OAAOd,SAGzBP,EAASyB,KAAI,SAAAd,GAAO,OACnB,kBAAC,IAAD,CACEe,IAAKf,EAAQ,gBACbJ,MAAOI,EAAQ,iBAEdgB,YAAYhB,EAAQ,wBAOjC,kBAAC,IAAD,CAAaK,UAAWtB,EAAQJ,aAC9B,kBAAC,IAAD,CAAY2B,GAAG,cAAf,QACA,kBAAC,IAAD,CACEV,MAAOqB,OAAOzB,EAASI,OACvBW,QAAQ,aACRD,GAAG,cACHE,SAAU,SAAAC,GACJA,EAAEC,OAAOd,QAAUqB,OAAOzB,EAASI,QACrCJ,EAAS0B,WAIb,kBAAC,IAAD,CAAUtB,MAAM,SAAhB,cACA,kBAAC,IAAD,CAAUA,MAAM,QAAhB,eAGJ,kBAAC,IAAD,CAAMO,QAAQ,YACZ,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAaH,QAASb,S,EAhG5B5B,E,+PACYiB,EAKCiB,Q,UAkGJ0B,cAAI5D,GAAJ,O,6FAjJTG,E,mFAMAI,E,kFAkBAO,E,oFAUAG,E,mFAOAjB,E,4qBC5CA6D,EAAY9C,IAAOC,IAAV,6EAAGD,CAAH,uZAWD,SAAA+C,GAAK,OAAKA,EAAM7B,SAAW,OAAS,UAC9B,SAAA6B,GAAK,OAAKA,EAAM7B,SAAW,MAAQ,OACjC,SAAA6B,GAAK,OAAKA,EAAM7B,SAAW,IAAM,SAKzC,SAAA6B,GAAK,OAAKA,EAAM7B,SAAW,OAAS,UACtC,SAAA6B,GAAK,OAAKA,EAAM7B,SAAW,aASzB,SAAA6B,GAAK,OAAKA,EAAM7B,SAAW,OAAS,UAKpC,SAAA6B,GAAK,OAAKA,EAAM7B,SAAW,OAAS,UAW5C8B,EAAaC,MAAkBC,QAAQ,CAL/B,IACC,KAI+CC,GACxDC,EAAUH,MAAcD,WAAWA,GAE5BK,EAAc,SAAC,GAAqC,MAAnC3B,EAAmC,EAAnCA,QACtB4B,EAASC,mBACTC,EAAUD,mBACVrC,EAAWC,cA0BjB,OAxBAC,qBAAU,WACR,cAAC,4BAAAG,EAAA,sDACOkC,EAAWC,MAEdC,OAAO,CACN,CAAC,EAAG,GACJ,CAnBI,IACC,OAoBNC,YAAY,CAAC,GAAK,KAClBC,GAAG,QAAQ,WACVC,IACUN,EAAQO,SACfC,KAAK,YAAaF,IAAgBG,cAEzCH,IACUR,EAAOS,SACdG,KAAKT,GACLS,KACCT,EAASQ,UACTP,IAAkBS,WA9BV,KACA,MA6B0CC,MA5BvC,IAUhB,0CAAD,KAqBC,IAGD,kBAACtB,EAAD,CAAW5B,SAAUA,EAASI,OAC5B,yBACE+C,IAAKf,EACLgB,MAzCM,IA0CNC,OAzCO,IA0CPC,oBAAoB,gBACpBC,QAAO,cA5CD,IA4CC,YA3CA,MA6CP,uBACEJ,IAAKb,EACLS,WACET,SAAA,UAAAA,EAASO,eAAT,eAAkBW,aAAa,eAA/B,qBA/CM,IA+CN,cA9CM,KA8CN,oBA7CS,EA6CT,MAIF,2BACE,0BAAM3C,UAAU,SAAS4C,EAAGvB,EAAQD,MAEtC,uBAAGpB,UAAU,SACX,kBAAC,IAAD,CAAWqB,QAASA,KAEtB,uBAAGrB,UAAU,UACX,kBAAC,IAAD,CAAaqB,QAASA,EAAS1B,QAASA,S,EApDvC2B,E,yFAGMlC,S,6FAlDb2B,E,sGAuCQ,I,kGACC,I,oGACG,I,uGACA,K,sGACG,E,yGACfE,E,uGACAI,E,oGAEOC,E,woBCnDPuB,EAAQR,IACKS,KAChBC,OAAO,EAAE,EAAG,IAOFC,EAAc,SAAC,GAA2C,kBAAzCrD,EAAyC,EAAzCA,QAAS0B,EAAgC,EAAhCA,QAAgC,EACvC1C,mBAASsE,EAAcC,UADgB,WAC9DC,EAD8D,KACrDC,EADqD,OAEjCzE,qBAFiC,WAE9D0E,EAF8D,KAElDC,EAFkD,OAG/B3E,qBAH+B,WAG9D4E,EAH8D,KAGjDC,EAHiD,KAK/DC,EAAc,SAACC,GAAD,OAClBC,mBAAQ,kBAAMtC,EAAQqC,KAAU,CAACA,KASnC,OAfqE,EAK/DD,EAL+D,aAQrEpE,qBAAU,WACR,cAAC,4BAAAG,EAAA,sEAC+BoE,YAAejE,GAD9C,OACOkE,EADP,OAECL,EAAeK,GAFhB,0CAAD,KAIC,CAAClE,IAGF,oCACGwD,EAAQ1C,KAAI,SAACqD,EAAQC,GACpB,OACE,0BACEnB,EAAGa,EAAYK,GACfpD,IAAKoD,EAAOE,WAAWC,SACvBC,UAASJ,EAAOE,WAAWC,SAC3B1D,MAAO,CACL4D,KAAO,WACL,GAAIZ,aAAJ,EAAIA,EAAaa,aACf,OAAOvB,EACLU,EAAYc,QAAQP,EAAOE,WAAWC,UAAUK,KAH/C,IAQTC,YAAa,WACXjB,EAAc,CACZkB,OAAQrH,SAASsH,cAAT,oBACOX,EAAOE,WAAWC,SADzB,OAGR/C,IAAK4C,IAEPV,EAAW,GAAD,WACLD,EAAQuB,MAAM,EAAGX,IADZ,IAELZ,EAAQuB,MAAMX,EAAQ,EAAGZ,EAAQwB,SAF5B,CAGRb,MAGJc,aAAc,WACZtB,EAAc,YAKtB,kBAAC,IAAD,CACEuB,OAAQxB,EACRyB,SAAUzB,aAAF,EAAEA,EAAYmB,OACtBO,UAAU,QAEV,kBAAC,IAAD,CAAMxE,MAAO,CAAEyE,YAAa,SAC1B,kBAAC,IAAD,CAAazE,MAAO,CAAEC,SAAU,UAC9B,kBAAC,IAAD,CAAYV,QAAQ,YAApB,2BACA,6BACGuD,SADH,UACGA,EAAYnC,WADf,iBACG,EAAiB8C,kBADpB,aACG,EAA6BC,SAAU,IACvCZ,SAFH,UAEGA,EAAYnC,WAFf,iBAEG,EAAiB8C,kBAFpB,aAEG,EAA6BiB,UAEhC,kBAAC,IAAD,CAAYnF,QAAQ,YAApB,WACA,yBAAKS,MAAO,CAAE2E,WAAY,WAAYC,QAAS,UAC5CC,KAAKC,UACJ9B,SADD,UACCA,EAAac,eADd,aACC,EAAuBhB,SAAvB,UAAuBA,EAAYnC,WAAnC,iBAAuB,EAAiB8C,kBAAxC,aAAuB,EAA6BC,UACpD,KACA,S,EApEHjB,E,sPATPH,E,kGASOG,E,6kCCpBPsC,EAAgB,+BAAG,8BAAA9F,EAAA,sEAGb,4CAHa,uBAEV0D,EAFU,UAEVA,SAFU,kBAOhBA,EAASzC,KAAI,SAAA8E,GAAI,OAAIA,EAAKvB,WAAWC,aAPrB,2CAAH,qDA8BTL,EAAc,+BAAG,WAAO4B,GAAP,mCAAAhG,EAAA,yDACvBgG,EADuB,iEAMO,kCANP,uBAMXC,EANW,mBAQS,kCART,uBAQXC,EARW,UAUtB1G,EAAWyG,EAAQ/F,QAAO,SAAAiG,GAAI,OAAIA,EAAK,kBAAoBH,KAC3DI,EAAa5G,EAASyB,KAAI,SAAAkF,GAAI,OAAIA,EAAK,qBACvCE,EAA2BD,EAAWE,MAC1C,SAAAC,GAAS,OAAIA,EAAUC,QAAQ,QAAU,KAErCC,EAAwBL,EAAWE,MACvC,SAAAC,GAAS,OAAIA,EAAUC,QAAQ,OAAS,KAEpC5B,EACkB,IAAtBwB,EAAWjB,QACXkB,GACAI,EArB0B,UAsBAX,IAtBA,eAsBtBrC,EAtBsB,OAwBtBoB,EAAUpB,EAAciD,QAAO,SAACC,EAAKC,GAKzC,OAJAD,EAAIC,GAAW,GACfR,EAAWS,SAAQ,SAAAN,GACjBI,EAAIC,GAASL,GAAa,KAErBI,IACN,IAEHT,EAAUW,SAAQ,SAAAC,GAAY,MAC5B,GAAIA,EAAS,kBAAoBd,EAAjC,CAGA,IAAMe,EAAeD,EAAS1G,SAAS4G,QAAQ,WAAY,IAAIA,QAC7D,QACA,IAEIT,EAAYO,EAAS,kBACyB,iBAAzCjC,SAAP,UAAOA,EAAUkC,UAAjB,aAAO,EAA0BR,MACnC1B,EAAQkC,GAAcR,IAAcU,OAAOH,EAASI,YAKpDtC,GACFuC,OAAOC,KAAKvC,GAASgC,SAAQ,SAAAE,GAC3B,IAAMM,EAAMxC,EAAQkC,GAAcV,GAC5BiB,EAAKzC,EAAQkC,GAAcN,GAE3Bc,EAAW,CACfC,IAAKH,EAAMC,EACX,aACE,OAAOD,EAAMI,KAAKD,KAAO,GAE3B,YACE,OAAOF,EAAKG,KAAKD,KAAO,GAE1B,UACE,OAAOC,KAAKC,OAASD,KAAKE,QAI9B9C,EAAQkC,GAAR,KACKlC,EAAQkC,GADb,GAEKQ,MAnEmB,kBAwErB,CACLvB,cACApB,eACAwB,aACAvB,YA5E0B,4CAAH,uD,6FA9BrBiB,E,2FA8BO1B,E,oiBCxBAwD,EAAY,SAAC,GAAgC,IAA9B/F,EAA8B,EAA9BA,QAA8B,EAC9B1C,qBAD8B,WACjD0I,EADiD,KAC1CC,EAD0C,KAaxD,OAVAjI,qBAAU,WACR,cAAC,8BAAAG,EAAA,sEACkC,kCADlC,gBACkB6H,EADlB,UAKCC,EAASD,GALV,0CAAD,KAOC,MAGCA,GACFA,EAAMnE,SAASzC,KAAI,SAAA8G,GAAI,OACrB,0BAAM7G,IAAK6G,EAAKvD,WAAWwD,SAAU5E,EAAGvB,EAAQkG,S,EAhBzCH,E,yIAAAA,E","file":"client.f49695.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(React.createElement(App), document.getElementById('app'));\n","import React, { useEffect, useState } from 'react';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Select from '@material-ui/core/Select';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport { makeStyles } from '@material-ui/core/styles';\nimport FormControl from '@material-ui/core/FormControl';\nimport Typography from '@material-ui/core/Typography';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport { createMuiTheme, ThemeProvider } from '@material-ui/core/styles';\nimport { hot } from 'react-hot-loader/root';\nimport { capitalCase } from 'change-case';\nimport styled from 'styled-components';\nimport GithubCorner from 'react-github-corner';\nimport { PrecinctMap } from './components/PrecinctMap';\nimport useDarkMode from 'use-dark-mode';\nimport { Theme } from '@material-ui/core';\n\nconst LightMode = createMuiTheme({\n  palette: {\n    type: 'light',\n  },\n});\n\nconst DarkMode = createMuiTheme({\n  palette: {\n    type: 'dark',\n    primary: {\n      light: '#757ce8',\n      main: '#90CAF9',\n      dark: '#002884',\n      contrastText: '#fff',\n    },\n    secondary: {\n      light: '#ff7961',\n      main: '#f44336',\n      dark: '#ba000d',\n      contrastText: '#000',\n    },\n  },\n});\n\nconst StyledPage = styled.div`\n  max-width: 800px;\n  margin: 20px;\n\n  @media (min-width: 840px) {\n    margin: 20px auto;\n    margin-bottom: 0;\n  }\n`;\n\nconst useStyles = makeStyles(theme => ({\n  formControl: {\n    margin: theme.spacing(1),\n    minWidth: 120,\n  },\n}));\n\nconst App = () => {\n  const classes = useStyles();\n  const [regionLevel, setRegionLevel] = useState<string>('neighborhood');\n  const [currContest, setCurrContest] = useState<string>();\n  const [contests, setContests] = useState<object[]>([]);\n  const [theme, setTheme] = useState<Theme>();\n  const darkMode = useDarkMode();\n\n  useEffect(() => {\n    const darkModeEnabled = darkMode.value;\n    setTheme(darkModeEnabled ? DarkMode : LightMode);\n  }, [darkMode]);\n\n  useEffect(() => {\n    (async () => {\n      // @ts-ignore\n      const { default: contests } = await import('../../data/contests_8.json');\n      const countyLevelContests = contests.filter(contest => !contest.Precinct);\n      setContests(countyLevelContests);\n      setCurrContest(countyLevelContests[1]['Contest Name']);\n    })();\n  }, []);\n\n  return (\n    <ThemeProvider theme={theme}>\n      <StyledPage>\n        <GithubCorner href=\"https://github.com/petermikitsh/sandiego-2020-primary-results\" />\n        <Typography variant=\"h3\" component=\"h1\">\n          San Diego County\n        </Typography>\n        <Typography variant=\"h4\" component=\"h2\">\n          March 3, 2020 Primary\n        </Typography>\n        <FormControl className={classes.formControl}>\n          <InputLabel id=\"detail-level-label\">Region</InputLabel>\n          <Select\n            value={regionLevel}\n            labelId=\"detail-level-label\"\n            id=\"detail-level\"\n            onChange={e => {\n              // @ts-ignore\n              setRegionLevel(e.target.value);\n            }}\n          >\n            <MenuItem value=\"precinct\" disabled>\n              Precinct (coming soon)\n            </MenuItem>\n            <MenuItem value=\"neighborhood\">Neighborhood</MenuItem>\n          </Select>\n        </FormControl>\n        <FormControl\n          className={classes.formControl}\n          style={{ maxWidth: '350px' }}\n        >\n          {currContest && contests && (\n            <>\n              <InputLabel id=\"demo-simple-select-label\">Contest</InputLabel>\n              <Select\n                value={currContest}\n                labelId=\"demo-simple-select-label\"\n                id=\"demo-simple-select\"\n                onChange={e => {\n                  // @ts-ignore\n                  setCurrContest(e.target.value);\n                }}\n              >\n                {contests.map(contest => (\n                  <MenuItem\n                    key={contest['Contest Name']}\n                    value={contest['Contest Name']}\n                  >\n                    {capitalCase(contest['Contest Name'])}\n                  </MenuItem>\n                ))}\n              </Select>\n            </>\n          )}\n        </FormControl>\n        <FormControl className={classes.formControl}>\n          <InputLabel id=\"mode-label\">Mode</InputLabel>\n          <Select\n            value={String(darkMode.value)}\n            labelId=\"mode-label\"\n            id=\"mode-select\"\n            onChange={e => {\n              if (e.target.value !== String(darkMode.value)) {\n                darkMode.toggle();\n              }\n            }}\n          >\n            <MenuItem value=\"false\">Light Mode</MenuItem>\n            <MenuItem value=\"true\">Dark Mode</MenuItem>\n          </Select>\n        </FormControl>\n        <Card variant=\"outlined\">\n          <CardContent>\n            <PrecinctMap contest={currContest} />\n          </CardContent>\n        </Card>\n      </StyledPage>\n    </ThemeProvider>\n  );\n};\n\nexport default hot(App);\n","import React, { useEffect, useRef } from 'react';\nimport * as geo from 'd3-geo';\nimport * as selection from 'd3-selection';\nimport * as zoom from 'd3-zoom';\nimport styled from 'styled-components';\nimport useDarkMode from 'use-dark-mode';\nimport { RegionLayer } from './RegionLayer';\nimport { RoadLayer } from './RoadLayer';\n// @ts-ignore\nimport { default as sdcounty } from '../../../data/sdcounty.geojson';\n\ninterface StyledMapProps {\n  darkMode: boolean;\n}\n\nconst StyledMap = styled.div<StyledMapProps>`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n\n  path {\n    vector-effect: non-scaling-stroke;\n    stroke-width: 0.2;\n  }\n\n  .county {\n    stroke: ${props => (props.darkMode ? '#fff' : '#555')};\n    stroke-width: ${props => (props.darkMode ? '1.5' : '1')};\n    stroke-opacity: ${props => (props.darkMode ? '1' : '0.5')};\n    fill: transparent;\n  }\n\n  .region path {\n    stroke: ${props => (props.darkMode ? '#333' : '#aaa')};\n    fill: ${props => (props.darkMode ? '#e7e7e7' : '#e7e7e7')};\n    fill: #f9f9fa;\n    stroke-opacity: 0.5;\n    fill-opacity: 0.5;\n    cursor: pointer;\n  }\n\n  .region path:hover {\n    stroke-width: 2;\n    stroke: ${props => (props.darkMode ? '#333' : '#222')};\n    stroke-opacity: 1;\n  }\n\n  .roads path {\n    stroke: ${props => (props.darkMode ? '#888' : '#ddd')};\n    stroke-width: 1;\n    fill: transparent;\n  }\n`;\n\nconst width = 600;\nconst height = 500;\nconst INITIAL_X = -500;\nconst INITIAL_Y = -1400;\nconst INITIAL_ZOOM = 4;\nconst projection = geo.geoMercator().fitSize([width, height], sdcounty);\nconst getPath = geo.geoPath().projection(projection);\n\nexport const PrecinctMap = ({ contest }: { contest: string }) => {\n  const svgRef = useRef<SVGSVGElement>();\n  const zoomRef = useRef<SVGGElement>();\n  const darkMode = useDarkMode();\n\n  useEffect(() => {\n    (async () => {\n      const currZoom = zoom\n        .zoom()\n        .extent([\n          [0, 0],\n          [width, height],\n        ])\n        .scaleExtent([0.9, 25])\n        .on('zoom', () => {\n          selection\n            .select(zoomRef.current)\n            .attr('transform', selection.event.transform);\n        });\n      selection\n        .select(svgRef.current)\n        .call(currZoom)\n        .call(\n          currZoom.transform,\n          zoom.zoomIdentity.translate(INITIAL_X, INITIAL_Y).scale(INITIAL_ZOOM),\n        );\n    })();\n  }, []);\n\n  return (\n    <StyledMap darkMode={darkMode.value}>\n      <svg\n        ref={svgRef}\n        width={width}\n        height={height}\n        preserveAspectRatio=\"xMinYMin meet\"\n        viewBox={`0 0 ${width} ${height}`}\n      >\n        <g\n          ref={zoomRef}\n          transform={\n            zoomRef?.current?.getAttribute('transform') ||\n            `translate(${INITIAL_X}, ${INITIAL_Y}), scale(${INITIAL_ZOOM})`\n          }\n        >\n          <g>\n            <path className=\"county\" d={getPath(sdcounty)} />\n          </g>\n          <g className=\"roads\">\n            <RoadLayer getPath={getPath} />\n          </g>\n          <g className=\"region\">\n            <RegionLayer getPath={getPath} contest={contest} />\n          </g>\n        </g>\n      </svg>\n    </StyledMap>\n  );\n};\n","import React, { useState, useEffect, useMemo } from 'react';\nimport * as scale from 'd3-scale';\nimport * as scaleChromatic from 'd3-scale-chromatic';\nimport Popper from '@material-ui/core/Popper';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport { Typography } from '@material-ui/core';\n// @ts-ignore\nimport { default as neighborhoods } from '../../../data/consolidations.geojson';\nimport { getContestData, Results } from '../utils';\n\nconst color = scale\n  .scaleSequential(scaleChromatic.interpolateRdBu)\n  .domain([-1, 1]);\n\ninterface RegionLayerProps {\n  getPath(feature: any): string;\n  contest?: string;\n}\n\nexport const RegionLayer = ({ contest, getPath }: RegionLayerProps) => {\n  const [regions, setRegions] = useState(neighborhoods.features);\n  const [popperData, setPopperData] = useState<any>();\n  const [contestData, setContestData] = useState<Results>();\n\n  const getPathMemo = (feature: any) =>\n    useMemo(() => getPath(feature), [feature]);\n\n  useEffect(() => {\n    (async () => {\n      const currContestData = await getContestData(contest);\n      setContestData(currContestData);\n    })();\n  }, [contest]);\n\n  return (\n    <>\n      {regions.map((region, index) => {\n        return (\n          <path\n            d={getPathMemo(region)}\n            key={region.properties.CONSNAME}\n            data-id={region.properties.CONSNAME}\n            style={{\n              fill: (() => {\n                if (contestData?.isBinaryRace) {\n                  return color(\n                    contestData.results[region.properties.CONSNAME].net,\n                  );\n                }\n              })(),\n            }}\n            onMouseOver={() => {\n              setPopperData({\n                anchor: document.querySelector(\n                  `[data-id=\"${region.properties.CONSNAME}\"]`,\n                ),\n                geo: region,\n              });\n              setRegions([\n                ...regions.slice(0, index),\n                ...regions.slice(index + 1, regions.length),\n                region,\n              ]);\n            }}\n            onMouseLeave={() => {\n              setPopperData(null);\n            }}\n          />\n        );\n      })}\n      <Popper\n        open={!!popperData}\n        anchorEl={popperData?.anchor}\n        placement=\"left\"\n      >\n        <Card style={{ marginRight: '10px' }}>\n          <CardContent style={{ maxWidth: '325px' }}>\n            <Typography variant=\"overline\">PRECINCT / NEIGHBORHOOD</Typography>\n            <div>\n              {popperData?.geo?.properties?.CONSNAME}{' '}\n              {popperData?.geo?.properties?.PRECINCT}\n            </div>\n            <Typography variant=\"overline\">RESULTS</Typography>\n            <pre style={{ whiteSpace: 'pre-wrap', display: 'block' }}>\n              {JSON.stringify(\n                contestData?.results?.[popperData?.geo?.properties?.CONSNAME],\n                null,\n                2,\n              )}\n            </pre>\n          </CardContent>\n        </Card>\n      </Popper>\n    </>\n  );\n};\n","const getNeighborhoods = async (): Promise<string[]> => {\n  const {\n    default: { features },\n  } = await import(\n    // @ts-ignore\n    '../../data/consolidations.geojson'\n  );\n  return features.map(area => area.properties.CONSNAME);\n};\n\nexport interface Results {\n  contestName: string;\n  isBinaryRace: boolean;\n  candidates: string[];\n  // For each precinct:\n  [key: string]:\n    | {\n        // Candidate names & vote count\n        [key: string]: number;\n        // Below: for binary races only.\n        sum?: number;\n        readonly perYes?: number;\n        readonly perNo?: number;\n        readonly net?: number;\n      }\n    | string\n    | boolean\n    | string[];\n}\n\nexport const getContestData = async (contestName: string): Promise<Results> => {\n  if (!contestName) {\n    return;\n  }\n\n  // @ts-ignore\n  const { default: summary } = await import('../../data/summary_8.json');\n  // @ts-ignore\n  const { default: precincts } = await import('../../data/precincts_8.json');\n\n  const contests = summary.filter(item => item['Contest Name'] === contestName);\n  const candidates = contests.map(item => item['Candidate Name']);\n  const affirmativeCandidateName = candidates.find(\n    candidate => candidate.indexOf('YES') > -1,\n  );\n  const negativeCandidateName = candidates.find(\n    candidate => candidate.indexOf('NO') > -1,\n  );\n  const isBinaryRace =\n    candidates.length === 2 &&\n    affirmativeCandidateName &&\n    negativeCandidateName;\n  const neighborhoods = await getNeighborhoods();\n\n  const results = neighborhoods.reduce((acc, currVal) => {\n    acc[currVal] = {};\n    candidates.forEach(candidate => {\n      acc[currVal][candidate] = 0;\n    });\n    return acc;\n  }, {});\n\n  precincts.forEach(precinct => {\n    if (precinct['Contest Name'] !== contestName) {\n      return;\n    }\n    const neighborhood = precinct.Precinct.replace(/\\d+-\\d+-/, '').replace(\n      /-VBM/g,\n      '',\n    );\n    const candidate = precinct['Candidate Name'];\n    if (typeof results?.[neighborhood]?.[candidate] === 'number') {\n      results[neighborhood][candidate] += Number(precinct.Votes);\n    }\n  });\n\n  // Decorate with percentages for coloring purposes.\n  if (isBinaryRace) {\n    Object.keys(results).forEach(neighborhood => {\n      const YES = results[neighborhood][affirmativeCandidateName];\n      const NO = results[neighborhood][negativeCandidateName];\n\n      const moreData = {\n        sum: YES + NO,\n        get perYes() {\n          return YES / this.sum || 0;\n        },\n        get perNo() {\n          return NO / this.sum || 0;\n        },\n        get net() {\n          return this.perYes - this.perNo;\n        },\n      };\n\n      results[neighborhood] = {\n        ...results[neighborhood],\n        ...moreData,\n      };\n    });\n  }\n\n  return {\n    contestName,\n    isBinaryRace,\n    candidates,\n    results,\n  };\n};\n","import React, { useState, useEffect } from 'react';\n\ninterface RoadLayerProps {\n  getPath(road: any): string;\n}\n\nexport const RoadLayer = ({ getPath }: RoadLayerProps) => {\n  const [roads, setRoads] = useState<any>();\n\n  useEffect(() => {\n    (async () => {\n      const { default: roads } = await import(\n        // @ts-ignore\n        '../../../data/highways.geojson'\n      );\n      setRoads(roads);\n    })();\n  }, []);\n\n  return (\n    !!roads &&\n    roads.features.map(road => (\n      <path key={road.properties.OBJECTID} d={getPath(road)} />\n    ))\n  );\n};\n"],"sourceRoot":""}